// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package txmng

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	mock "github.com/stretchr/testify/mock"
)

// NewMockContext creates a new instance of MockContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockContext {
	mock := &MockContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockContext is an autogenerated mock type for the Context type
type MockContext struct {
	mock.Mock
}

type MockContext_Expecter struct {
	mock *mock.Mock
}

func (_m *MockContext) EXPECT() *MockContext_Expecter {
	return &MockContext_Expecter{mock: &_m.Mock}
}

// Deadline provides a mock function for the type MockContext
func (_mock *MockContext) Deadline() (time.Time, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockContext_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type MockContext_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *MockContext_Expecter) Deadline() *MockContext_Deadline_Call {
	return &MockContext_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *MockContext_Deadline_Call) Run(run func()) *MockContext_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Deadline_Call) Return(deadline time.Time, ok bool) *MockContext_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *MockContext_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *MockContext_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type MockContext
func (_mock *MockContext) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// MockContext_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type MockContext_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *MockContext_Expecter) Done() *MockContext_Done_Call {
	return &MockContext_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *MockContext_Done_Call) Run(run func()) *MockContext_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Done_Call) Return(valCh <-chan struct{}) *MockContext_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *MockContext_Done_Call) RunAndReturn(run func() <-chan struct{}) *MockContext_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type MockContext
func (_mock *MockContext) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockContext_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type MockContext_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *MockContext_Expecter) Err() *MockContext_Err_Call {
	return &MockContext_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *MockContext_Err_Call) Run(run func()) *MockContext_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_Err_Call) Return(err error) *MockContext_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockContext_Err_Call) RunAndReturn(run func() error) *MockContext_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type MockContext
func (_mock *MockContext) Value(key any) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// MockContext_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockContext_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *MockContext_Expecter) Value(key interface{}) *MockContext_Value_Call {
	return &MockContext_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *MockContext_Value_Call) Run(run func(key any)) *MockContext_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockContext_Value_Call) Return(v any) *MockContext_Value_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockContext_Value_Call) RunAndReturn(run func(key any) any) *MockContext_Value_Call {
	_c.Call.Return(run)
	return _c
}

// getID provides a mock function for the type MockContext
func (_mock *MockContext) getID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for getID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// MockContext_getID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getID'
type MockContext_getID_Call struct {
	*mock.Call
}

// getID is a helper method to define mock.On call
func (_e *MockContext_Expecter) getID() *MockContext_getID_Call {
	return &MockContext_getID_Call{Call: _e.mock.On("getID")}
}

func (_c *MockContext_getID_Call) Run(run func()) *MockContext_getID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockContext_getID_Call) Return(n int64) *MockContext_getID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockContext_getID_Call) RunAndReturn(run func() int64) *MockContext_getID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTx creates a new instance of MockTx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTx[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTx[T] {
	mock := &MockTx[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTx is an autogenerated mock type for the Tx type
type MockTx[T any] struct {
	mock.Mock
}

type MockTx_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockTx[T]) EXPECT() *MockTx_Expecter[T] {
	return &MockTx_Expecter[T]{mock: &_m.Mock}
}

// Commit provides a mock function for the type MockTx
func (_mock *MockTx[T]) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockTx_Commit_Call[T any] struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter[T]) Commit(ctx interface{}) *MockTx_Commit_Call[T] {
	return &MockTx_Commit_Call[T]{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockTx_Commit_Call[T]) Run(run func(ctx context.Context)) *MockTx_Commit_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Commit_Call[T]) Return(err error) *MockTx_Commit_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Commit_Call[T]) RunAndReturn(run func(ctx context.Context) error) *MockTx_Commit_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type MockTx
func (_mock *MockTx[T]) GetDB() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// MockTx_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockTx_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *MockTx_Expecter[T]) GetDB() *MockTx_GetDB_Call[T] {
	return &MockTx_GetDB_Call[T]{Call: _e.mock.On("GetDB")}
}

func (_c *MockTx_GetDB_Call[T]) Run(run func()) *MockTx_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTx_GetDB_Call[T]) Return(v T) *MockTx_GetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockTx_GetDB_Call[T]) RunAndReturn(run func() T) *MockTx_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockTx
func (_mock *MockTx[T]) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockTx_Rollback_Call[T any] struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTx_Expecter[T]) Rollback(ctx interface{}) *MockTx_Rollback_Call[T] {
	return &MockTx_Rollback_Call[T]{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockTx_Rollback_Call[T]) Run(run func(ctx context.Context)) *MockTx_Rollback_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTx_Rollback_Call[T]) Return(err error) *MockTx_Rollback_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTx_Rollback_Call[T]) RunAndReturn(run func(ctx context.Context) error) *MockTx_Rollback_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockDBProvider creates a new instance of MockDBProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBProvider[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBProvider[T] {
	mock := &MockDBProvider[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBProvider is an autogenerated mock type for the DBProvider type
type MockDBProvider[T any] struct {
	mock.Mock
}

type MockDBProvider_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockDBProvider[T]) EXPECT() *MockDBProvider_Expecter[T] {
	return &MockDBProvider_Expecter[T]{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type MockDBProvider
func (_mock *MockDBProvider[T]) BeginTx(opts TxOpts) (Tx[T], error) {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 Tx[T]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(TxOpts) (Tx[T], error)); ok {
		return returnFunc(opts)
	}
	if returnFunc, ok := ret.Get(0).(func(TxOpts) Tx[T]); ok {
		r0 = returnFunc(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Tx[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(TxOpts) error); ok {
		r1 = returnFunc(opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBProvider_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type MockDBProvider_BeginTx_Call[T any] struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - opts TxOpts
func (_e *MockDBProvider_Expecter[T]) BeginTx(opts interface{}) *MockDBProvider_BeginTx_Call[T] {
	return &MockDBProvider_BeginTx_Call[T]{Call: _e.mock.On("BeginTx", opts)}
}

func (_c *MockDBProvider_BeginTx_Call[T]) Run(run func(opts TxOpts)) *MockDBProvider_BeginTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 TxOpts
		if args[0] != nil {
			arg0 = args[0].(TxOpts)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBProvider_BeginTx_Call[T]) Return(tx Tx[T], err error) *MockDBProvider_BeginTx_Call[T] {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockDBProvider_BeginTx_Call[T]) RunAndReturn(run func(opts TxOpts) (Tx[T], error)) *MockDBProvider_BeginTx_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type MockDBProvider
func (_mock *MockDBProvider[T]) GetDB(opts NoTxOpts) T {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func(NoTxOpts) T); ok {
		r0 = returnFunc(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// MockDBProvider_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockDBProvider_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - opts NoTxOpts
func (_e *MockDBProvider_Expecter[T]) GetDB(opts interface{}) *MockDBProvider_GetDB_Call[T] {
	return &MockDBProvider_GetDB_Call[T]{Call: _e.mock.On("GetDB", opts)}
}

func (_c *MockDBProvider_GetDB_Call[T]) Run(run func(opts NoTxOpts)) *MockDBProvider_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 NoTxOpts
		if args[0] != nil {
			arg0 = args[0].(NoTxOpts)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBProvider_GetDB_Call[T]) Return(v T) *MockDBProvider_GetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDBProvider_GetDB_Call[T]) RunAndReturn(run func(opts NoTxOpts) T) *MockDBProvider_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockPGX creates a new instance of MockPGX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPGX(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPGX {
	mock := &MockPGX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPGX is an autogenerated mock type for the PGX type
type MockPGX struct {
	mock.Mock
}

type MockPGX_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPGX) EXPECT() *MockPGX_Expecter {
	return &MockPGX_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type MockPGX
func (_mock *MockPGX) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPGX_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type MockPGX_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPGX_Expecter) Begin(ctx interface{}) *MockPGX_Begin_Call {
	return &MockPGX_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *MockPGX_Begin_Call) Run(run func(ctx context.Context)) *MockPGX_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPGX_Begin_Call) Return(tx pgx.Tx, err error) *MockPGX_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *MockPGX_Begin_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *MockPGX_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type MockPGX
func (_mock *MockPGX) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPGX_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockPGX_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPGX_Expecter) Commit(ctx interface{}) *MockPGX_Commit_Call {
	return &MockPGX_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *MockPGX_Commit_Call) Run(run func(ctx context.Context)) *MockPGX_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPGX_Commit_Call) Return(err error) *MockPGX_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPGX_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *MockPGX_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function for the type MockPGX
func (_mock *MockPGX) Conn() *pgx.Conn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if returnFunc, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}
	return r0
}

// MockPGX_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type MockPGX_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *MockPGX_Expecter) Conn() *MockPGX_Conn_Call {
	return &MockPGX_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *MockPGX_Conn_Call) Run(run func()) *MockPGX_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPGX_Conn_Call) Return(conn *pgx.Conn) *MockPGX_Conn_Call {
	_c.Call.Return(conn)
	return _c
}

func (_c *MockPGX_Conn_Call) RunAndReturn(run func() *pgx.Conn) *MockPGX_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFrom provides a mock function for the type MockPGX
func (_mock *MockPGX) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	ret := _mock.Called(ctx, tableName, columnNames, rowSrc)

	if len(ret) == 0 {
		panic("no return value specified for CopyFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return returnFunc(ctx, tableName, columnNames, rowSrc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPGX_CopyFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFrom'
type MockPGX_CopyFrom_Call struct {
	*mock.Call
}

// CopyFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName pgx.Identifier
//   - columnNames []string
//   - rowSrc pgx.CopyFromSource
func (_e *MockPGX_Expecter) CopyFrom(ctx interface{}, tableName interface{}, columnNames interface{}, rowSrc interface{}) *MockPGX_CopyFrom_Call {
	return &MockPGX_CopyFrom_Call{Call: _e.mock.On("CopyFrom", ctx, tableName, columnNames, rowSrc)}
}

func (_c *MockPGX_CopyFrom_Call) Run(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource)) *MockPGX_CopyFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Identifier
		if args[1] != nil {
			arg1 = args[1].(pgx.Identifier)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 pgx.CopyFromSource
		if args[3] != nil {
			arg3 = args[3].(pgx.CopyFromSource)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockPGX_CopyFrom_Call) Return(n int64, err error) *MockPGX_CopyFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockPGX_CopyFrom_Call) RunAndReturn(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)) *MockPGX_CopyFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockPGX
func (_mock *MockPGX) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(arguments) > 0 {
		tmpRet = _mock.Called(ctx, sql, arguments)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgconn.CommandTag, error)); ok {
		return returnFunc(ctx, sql, arguments...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgconn.CommandTag); ok {
		r0 = returnFunc(ctx, sql, arguments...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, arguments...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPGX_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockPGX_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - arguments ...any
func (_e *MockPGX_Expecter) Exec(ctx interface{}, sql interface{}, arguments ...interface{}) *MockPGX_Exec_Call {
	return &MockPGX_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, sql}, arguments...)...)}
}

func (_c *MockPGX_Exec_Call) Run(run func(ctx context.Context, sql string, arguments ...any)) *MockPGX_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockPGX_Exec_Call) Return(commandTag pgconn.CommandTag, err error) *MockPGX_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *MockPGX_Exec_Call) RunAndReturn(run func(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)) *MockPGX_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// LargeObjects provides a mock function for the type MockPGX
func (_mock *MockPGX) LargeObjects() pgx.LargeObjects {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LargeObjects")
	}

	var r0 pgx.LargeObjects
	if returnFunc, ok := ret.Get(0).(func() pgx.LargeObjects); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(pgx.LargeObjects)
	}
	return r0
}

// MockPGX_LargeObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LargeObjects'
type MockPGX_LargeObjects_Call struct {
	*mock.Call
}

// LargeObjects is a helper method to define mock.On call
func (_e *MockPGX_Expecter) LargeObjects() *MockPGX_LargeObjects_Call {
	return &MockPGX_LargeObjects_Call{Call: _e.mock.On("LargeObjects")}
}

func (_c *MockPGX_LargeObjects_Call) Run(run func()) *MockPGX_LargeObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPGX_LargeObjects_Call) Return(largeObjects pgx.LargeObjects) *MockPGX_LargeObjects_Call {
	_c.Call.Return(largeObjects)
	return _c
}

func (_c *MockPGX_LargeObjects_Call) RunAndReturn(run func() pgx.LargeObjects) *MockPGX_LargeObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type MockPGX
func (_mock *MockPGX) Prepare(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error) {
	ret := _mock.Called(ctx, name, sql)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *pgconn.StatementDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*pgconn.StatementDescription, error)); ok {
		return returnFunc(ctx, name, sql)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *pgconn.StatementDescription); ok {
		r0 = returnFunc(ctx, name, sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgconn.StatementDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, sql)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPGX_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type MockPGX_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - sql string
func (_e *MockPGX_Expecter) Prepare(ctx interface{}, name interface{}, sql interface{}) *MockPGX_Prepare_Call {
	return &MockPGX_Prepare_Call{Call: _e.mock.On("Prepare", ctx, name, sql)}
}

func (_c *MockPGX_Prepare_Call) Run(run func(ctx context.Context, name string, sql string)) *MockPGX_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPGX_Prepare_Call) Return(statementDescription *pgconn.StatementDescription, err error) *MockPGX_Prepare_Call {
	_c.Call.Return(statementDescription, err)
	return _c
}

func (_c *MockPGX_Prepare_Call) RunAndReturn(run func(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error)) *MockPGX_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockPGX
func (_mock *MockPGX) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgx.Rows, error)); ok {
		return returnFunc(ctx, sql, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Rows); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPGX_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockPGX_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockPGX_Expecter) Query(ctx interface{}, sql interface{}, args ...interface{}) *MockPGX_Query_Call {
	return &MockPGX_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockPGX_Query_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockPGX_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockPGX_Query_Call) Return(rows pgx.Rows, err error) *MockPGX_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockPGX_Query_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) (pgx.Rows, error)) *MockPGX_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockPGX
func (_mock *MockPGX) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Row); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// MockPGX_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockPGX_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *MockPGX_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *MockPGX_QueryRow_Call {
	return &MockPGX_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *MockPGX_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...any)) *MockPGX_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockPGX_QueryRow_Call) Return(row pgx.Row) *MockPGX_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockPGX_QueryRow_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) pgx.Row) *MockPGX_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockPGX
func (_mock *MockPGX) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPGX_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockPGX_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPGX_Expecter) Rollback(ctx interface{}) *MockPGX_Rollback_Call {
	return &MockPGX_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *MockPGX_Rollback_Call) Run(run func(ctx context.Context)) *MockPGX_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPGX_Rollback_Call) Return(err error) *MockPGX_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPGX_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *MockPGX_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function for the type MockPGX
func (_mock *MockPGX) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	ret := _mock.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 pgx.BatchResults
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Batch) pgx.BatchResults); ok {
		r0 = returnFunc(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.BatchResults)
		}
	}
	return r0
}

// MockPGX_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type MockPGX_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - b *pgx.Batch
func (_e *MockPGX_Expecter) SendBatch(ctx interface{}, b interface{}) *MockPGX_SendBatch_Call {
	return &MockPGX_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, b)}
}

func (_c *MockPGX_SendBatch_Call) Run(run func(ctx context.Context, b *pgx.Batch)) *MockPGX_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Batch
		if args[1] != nil {
			arg1 = args[1].(*pgx.Batch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPGX_SendBatch_Call) Return(batchResults pgx.BatchResults) *MockPGX_SendBatch_Call {
	_c.Call.Return(batchResults)
	return _c
}

func (_c *MockPGX_SendBatch_Call) RunAndReturn(run func(ctx context.Context, b *pgx.Batch) pgx.BatchResults) *MockPGX_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStdSQL creates a new instance of MockStdSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStdSQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStdSQL {
	mock := &MockStdSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStdSQL is an autogenerated mock type for the StdSQL type
type MockStdSQL struct {
	mock.Mock
}

type MockStdSQL_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStdSQL) EXPECT() *MockStdSQL_Expecter {
	return &MockStdSQL_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) Commit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStdSQL_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockStdSQL_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *MockStdSQL_Expecter) Commit() *MockStdSQL_Commit_Call {
	return &MockStdSQL_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *MockStdSQL_Commit_Call) Run(run func()) *MockStdSQL_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStdSQL_Commit_Call) Return(err error) *MockStdSQL_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStdSQL_Commit_Call) RunAndReturn(run func() error) *MockStdSQL_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStdSQL_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockStdSQL_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockStdSQL_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *MockStdSQL_ExecContext_Call {
	return &MockStdSQL_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockStdSQL_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockStdSQL_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStdSQL_ExecContext_Call) Return(result sql.Result, err error) *MockStdSQL_ExecContext_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MockStdSQL_ExecContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)) *MockStdSQL_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStdSQL_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type MockStdSQL_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *MockStdSQL_Expecter) PrepareContext(ctx interface{}, query interface{}) *MockStdSQL_PrepareContext_Call {
	return &MockStdSQL_PrepareContext_Call{Call: _e.mock.On("PrepareContext", ctx, query)}
}

func (_c *MockStdSQL_PrepareContext_Call) Run(run func(ctx context.Context, query string)) *MockStdSQL_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStdSQL_PrepareContext_Call) Return(stmt *sql.Stmt, err error) *MockStdSQL_PrepareContext_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *MockStdSQL_PrepareContext_Call) RunAndReturn(run func(ctx context.Context, query string) (*sql.Stmt, error)) *MockStdSQL_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStdSQL_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type MockStdSQL_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockStdSQL_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *MockStdSQL_QueryContext_Call {
	return &MockStdSQL_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockStdSQL_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockStdSQL_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStdSQL_QueryContext_Call) Return(rows *sql.Rows, err error) *MockStdSQL_QueryContext_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockStdSQL_QueryContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)) *MockStdSQL_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// MockStdSQL_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type MockStdSQL_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *MockStdSQL_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *MockStdSQL_QueryRowContext_Call {
	return &MockStdSQL_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockStdSQL_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *MockStdSQL_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockStdSQL_QueryRowContext_Call) Return(row *sql.Row) *MockStdSQL_QueryRowContext_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockStdSQL_QueryRowContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) *sql.Row) *MockStdSQL_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type MockStdSQL
func (_mock *MockStdSQL) Rollback() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStdSQL_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type MockStdSQL_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *MockStdSQL_Expecter) Rollback() *MockStdSQL_Rollback_Call {
	return &MockStdSQL_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *MockStdSQL_Rollback_Call) Run(run func()) *MockStdSQL_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStdSQL_Rollback_Call) Return(err error) *MockStdSQL_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStdSQL_Rollback_Call) RunAndReturn(run func() error) *MockStdSQL_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockScanner creates a new instance of MockScanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScanner {
	mock := &MockScanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockScanner is an autogenerated mock type for the Scanner type
type MockScanner struct {
	mock.Mock
}

type MockScanner_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScanner) EXPECT() *MockScanner_Expecter {
	return &MockScanner_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function for the type MockScanner
func (_mock *MockScanner) Scan(args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(args)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockScanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - args ...any
func (_e *MockScanner_Expecter) Scan(args ...interface{}) *MockScanner_Scan_Call {
	return &MockScanner_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, args...)...)}
}

func (_c *MockScanner_Scan_Call) Run(run func(args ...any)) *MockScanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		var variadicArgs []any
		if len(args) > 0 {
			variadicArgs = args[0].([]any)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *MockScanner_Scan_Call) Return(err error) *MockScanner_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScanner_Scan_Call) RunAndReturn(run func(args ...any) error) *MockScanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTxManager creates a new instance of MockTxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTxManager {
	mock := &MockTxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTxManager is an autogenerated mock type for the TxManager type
type MockTxManager struct {
	mock.Mock
}

type MockTxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTxManager) EXPECT() *MockTxManager_Expecter {
	return &MockTxManager_Expecter{mock: &_m.Mock}
}

// RunNoTx provides a mock function for the type MockTxManager
func (_mock *MockTxManager) RunNoTx(opts NoTxOpts, fn func(ctx Context) (Scanner, error)) (Scanner, error) {
	ret := _mock.Called(opts, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunNoTx")
	}

	var r0 Scanner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(NoTxOpts, func(ctx Context) (Scanner, error)) (Scanner, error)); ok {
		return returnFunc(opts, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(NoTxOpts, func(ctx Context) (Scanner, error)) Scanner); ok {
		r0 = returnFunc(opts, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Scanner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(NoTxOpts, func(ctx Context) (Scanner, error)) error); ok {
		r1 = returnFunc(opts, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTxManager_RunNoTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunNoTx'
type MockTxManager_RunNoTx_Call struct {
	*mock.Call
}

// RunNoTx is a helper method to define mock.On call
//   - opts NoTxOpts
//   - fn func(ctx Context) (Scanner, error)
func (_e *MockTxManager_Expecter) RunNoTx(opts interface{}, fn interface{}) *MockTxManager_RunNoTx_Call {
	return &MockTxManager_RunNoTx_Call{Call: _e.mock.On("RunNoTx", opts, fn)}
}

func (_c *MockTxManager_RunNoTx_Call) Run(run func(opts NoTxOpts, fn func(ctx Context) (Scanner, error))) *MockTxManager_RunNoTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 NoTxOpts
		if args[0] != nil {
			arg0 = args[0].(NoTxOpts)
		}
		var arg1 func(ctx Context) (Scanner, error)
		if args[1] != nil {
			arg1 = args[1].(func(ctx Context) (Scanner, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTxManager_RunNoTx_Call) Return(scanner Scanner, err error) *MockTxManager_RunNoTx_Call {
	_c.Call.Return(scanner, err)
	return _c
}

func (_c *MockTxManager_RunNoTx_Call) RunAndReturn(run func(opts NoTxOpts, fn func(ctx Context) (Scanner, error)) (Scanner, error)) *MockTxManager_RunNoTx_Call {
	_c.Call.Return(run)
	return _c
}

// RunTx provides a mock function for the type MockTxManager
func (_mock *MockTxManager) RunTx(opts TxOpts, fn func(ctx Context) (Scanner, error)) (Scanner, error) {
	ret := _mock.Called(opts, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 Scanner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(TxOpts, func(ctx Context) (Scanner, error)) (Scanner, error)); ok {
		return returnFunc(opts, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(TxOpts, func(ctx Context) (Scanner, error)) Scanner); ok {
		r0 = returnFunc(opts, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Scanner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(TxOpts, func(ctx Context) (Scanner, error)) error); ok {
		r1 = returnFunc(opts, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTxManager_RunTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTx'
type MockTxManager_RunTx_Call struct {
	*mock.Call
}

// RunTx is a helper method to define mock.On call
//   - opts TxOpts
//   - fn func(ctx Context) (Scanner, error)
func (_e *MockTxManager_Expecter) RunTx(opts interface{}, fn interface{}) *MockTxManager_RunTx_Call {
	return &MockTxManager_RunTx_Call{Call: _e.mock.On("RunTx", opts, fn)}
}

func (_c *MockTxManager_RunTx_Call) Run(run func(opts TxOpts, fn func(ctx Context) (Scanner, error))) *MockTxManager_RunTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 TxOpts
		if args[0] != nil {
			arg0 = args[0].(TxOpts)
		}
		var arg1 func(ctx Context) (Scanner, error)
		if args[1] != nil {
			arg1 = args[1].(func(ctx Context) (Scanner, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTxManager_RunTx_Call) Return(scanner Scanner, err error) *MockTxManager_RunTx_Call {
	_c.Call.Return(scanner, err)
	return _c
}

func (_c *MockTxManager_RunTx_Call) RunAndReturn(run func(opts TxOpts, fn func(ctx Context) (Scanner, error)) (Scanner, error)) *MockTxManager_RunTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDBManager creates a new instance of MockDBManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDBManager[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDBManager[T] {
	mock := &MockDBManager[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDBManager is an autogenerated mock type for the DBManager type
type MockDBManager[T any] struct {
	mock.Mock
}

type MockDBManager_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockDBManager[T]) EXPECT() *MockDBManager_Expecter[T] {
	return &MockDBManager_Expecter[T]{mock: &_m.Mock}
}

// GetDB provides a mock function for the type MockDBManager
func (_mock *MockDBManager[T]) GetDB(ctx Context) (T, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(Context) (T, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(Context) T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDBManager_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type MockDBManager_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - ctx Context
func (_e *MockDBManager_Expecter[T]) GetDB(ctx interface{}) *MockDBManager_GetDB_Call[T] {
	return &MockDBManager_GetDB_Call[T]{Call: _e.mock.On("GetDB", ctx)}
}

func (_c *MockDBManager_GetDB_Call[T]) Run(run func(ctx Context)) *MockDBManager_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Context
		if args[0] != nil {
			arg0 = args[0].(Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBManager_GetDB_Call[T]) Return(v T, err error) *MockDBManager_GetDB_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockDBManager_GetDB_Call[T]) RunAndReturn(run func(ctx Context) (T, error)) *MockDBManager_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MustGetDB provides a mock function for the type MockDBManager
func (_mock *MockDBManager[T]) MustGetDB(ctx Context) T {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func(Context) T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// MockDBManager_MustGetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetDB'
type MockDBManager_MustGetDB_Call[T any] struct {
	*mock.Call
}

// MustGetDB is a helper method to define mock.On call
//   - ctx Context
func (_e *MockDBManager_Expecter[T]) MustGetDB(ctx interface{}) *MockDBManager_MustGetDB_Call[T] {
	return &MockDBManager_MustGetDB_Call[T]{Call: _e.mock.On("MustGetDB", ctx)}
}

func (_c *MockDBManager_MustGetDB_Call[T]) Run(run func(ctx Context)) *MockDBManager_MustGetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 Context
		if args[0] != nil {
			arg0 = args[0].(Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDBManager_MustGetDB_Call[T]) Return(v T) *MockDBManager_MustGetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *MockDBManager_MustGetDB_Call[T]) RunAndReturn(run func(ctx Context) T) *MockDBManager_MustGetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockRetrier creates a new instance of MockRetrier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRetrier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRetrier {
	mock := &MockRetrier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRetrier is an autogenerated mock type for the Retrier type
type MockRetrier struct {
	mock.Mock
}

type MockRetrier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRetrier) EXPECT() *MockRetrier_Expecter {
	return &MockRetrier_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type MockRetrier
func (_mock *MockRetrier) Do(fn func() error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRetrier_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type MockRetrier_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - fn func() error
func (_e *MockRetrier_Expecter) Do(fn interface{}) *MockRetrier_Do_Call {
	return &MockRetrier_Do_Call{Call: _e.mock.On("Do", fn)}
}

func (_c *MockRetrier_Do_Call) Run(run func(fn func() error)) *MockRetrier_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() error
		if args[0] != nil {
			arg0 = args[0].(func() error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRetrier_Do_Call) Return(err error) *MockRetrier_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRetrier_Do_Call) RunAndReturn(run func(fn func() error) error) *MockRetrier_Do_Call {
	_c.Call.Return(run)
	return _c
}
