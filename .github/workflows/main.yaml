name: Pipeline
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  GO111MODULE: on
jobs:
  lint:
    strategy:
      matrix:
        go-version: [ 1.23.x ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run linter
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64
  test:
    strategy:
      matrix:
        go-version: [ 1.23.x ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          make test

  itest:
    strategy:
      matrix:
        go-version: [ 1.23.x ]
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        options: >-
          --health-cmd="pg_isready -U user -d db"
          --health-interval=3s
          --health-timeout=3s
          --health-retries=10
    steps:
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -U user -d db; do
            echo "Waiting for Postgres..."
            sleep 2
          done

      - name: Run integration tests
        env:
          PG_DSN: "postgres://user:password@localhost:5432/db?sslmode=disable"
        run: |
          go test -p 1 -v -tags integration ./internal/tests/...