// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package txmngtest

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/slavaavr/txmng"
	mock "github.com/stretchr/testify/mock"
)

// NewContext creates a new instance of Context. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Context {
	mock := &Context{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Context is an autogenerated mock type for the Context type
type Context struct {
	mock.Mock
}

type Context_Expecter struct {
	mock *mock.Mock
}

func (_m *Context) EXPECT() *Context_Expecter {
	return &Context_Expecter{mock: &_m.Mock}
}

// Deadline provides a mock function for the type Context
func (_mock *Context) Deadline() (time.Time, bool) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Deadline")
	}

	var r0 time.Time
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func() (time.Time, bool)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func() bool); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// Context_Deadline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deadline'
type Context_Deadline_Call struct {
	*mock.Call
}

// Deadline is a helper method to define mock.On call
func (_e *Context_Expecter) Deadline() *Context_Deadline_Call {
	return &Context_Deadline_Call{Call: _e.mock.On("Deadline")}
}

func (_c *Context_Deadline_Call) Run(run func()) *Context_Deadline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Deadline_Call) Return(deadline time.Time, ok bool) *Context_Deadline_Call {
	_c.Call.Return(deadline, ok)
	return _c
}

func (_c *Context_Deadline_Call) RunAndReturn(run func() (time.Time, bool)) *Context_Deadline_Call {
	_c.Call.Return(run)
	return _c
}

// Done provides a mock function for the type Context
func (_mock *Context) Done() <-chan struct{} {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Done")
	}

	var r0 <-chan struct{}
	if returnFunc, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}
	return r0
}

// Context_Done_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Done'
type Context_Done_Call struct {
	*mock.Call
}

// Done is a helper method to define mock.On call
func (_e *Context_Expecter) Done() *Context_Done_Call {
	return &Context_Done_Call{Call: _e.mock.On("Done")}
}

func (_c *Context_Done_Call) Run(run func()) *Context_Done_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Done_Call) Return(valCh <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(valCh)
	return _c
}

func (_c *Context_Done_Call) RunAndReturn(run func() <-chan struct{}) *Context_Done_Call {
	_c.Call.Return(run)
	return _c
}

// Err provides a mock function for the type Context
func (_mock *Context) Err() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Context_Err_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Err'
type Context_Err_Call struct {
	*mock.Call
}

// Err is a helper method to define mock.On call
func (_e *Context_Expecter) Err() *Context_Err_Call {
	return &Context_Err_Call{Call: _e.mock.On("Err")}
}

func (_c *Context_Err_Call) Run(run func()) *Context_Err_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_Err_Call) Return(err error) *Context_Err_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Context_Err_Call) RunAndReturn(run func() error) *Context_Err_Call {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function for the type Context
func (_mock *Context) Value(key any) any {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 any
	if returnFunc, ok := ret.Get(0).(func(any) any); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	return r0
}

// Context_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type Context_Value_Call struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
//   - key any
func (_e *Context_Expecter) Value(key interface{}) *Context_Value_Call {
	return &Context_Value_Call{Call: _e.mock.On("Value", key)}
}

func (_c *Context_Value_Call) Run(run func(key any)) *Context_Value_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Context_Value_Call) Return(v any) *Context_Value_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *Context_Value_Call) RunAndReturn(run func(key any) any) *Context_Value_Call {
	_c.Call.Return(run)
	return _c
}

// getID provides a mock function for the type Context
func (_mock *Context) getID() int64 {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for getID")
	}

	var r0 int64
	if returnFunc, ok := ret.Get(0).(func() int64); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int64)
	}
	return r0
}

// Context_getID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getID'
type Context_getID_Call struct {
	*mock.Call
}

// getID is a helper method to define mock.On call
func (_e *Context_Expecter) getID() *Context_getID_Call {
	return &Context_getID_Call{Call: _e.mock.On("getID")}
}

func (_c *Context_getID_Call) Run(run func()) *Context_getID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Context_getID_Call) Return(n int64) *Context_getID_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Context_getID_Call) RunAndReturn(run func() int64) *Context_getID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTx creates a new instance of Tx. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTx[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *Tx[T] {
	mock := &Tx[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Tx is an autogenerated mock type for the Tx type
type Tx[T any] struct {
	mock.Mock
}

type Tx_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *Tx[T]) EXPECT() *Tx_Expecter[T] {
	return &Tx_Expecter[T]{mock: &_m.Mock}
}

// Commit provides a mock function for the type Tx
func (_mock *Tx[T]) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Tx_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Tx_Commit_Call[T any] struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tx_Expecter[T]) Commit(ctx interface{}) *Tx_Commit_Call[T] {
	return &Tx_Commit_Call[T]{Call: _e.mock.On("Commit", ctx)}
}

func (_c *Tx_Commit_Call[T]) Run(run func(ctx context.Context)) *Tx_Commit_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Tx_Commit_Call[T]) Return(err error) *Tx_Commit_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *Tx_Commit_Call[T]) RunAndReturn(run func(ctx context.Context) error) *Tx_Commit_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type Tx
func (_mock *Tx[T]) GetDB() T {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func() T); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// Tx_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type Tx_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
func (_e *Tx_Expecter[T]) GetDB() *Tx_GetDB_Call[T] {
	return &Tx_GetDB_Call[T]{Call: _e.mock.On("GetDB")}
}

func (_c *Tx_GetDB_Call[T]) Run(run func()) *Tx_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Tx_GetDB_Call[T]) Return(v T) *Tx_GetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *Tx_GetDB_Call[T]) RunAndReturn(run func() T) *Tx_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type Tx
func (_mock *Tx[T]) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Tx_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type Tx_Rollback_Call[T any] struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tx_Expecter[T]) Rollback(ctx interface{}) *Tx_Rollback_Call[T] {
	return &Tx_Rollback_Call[T]{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *Tx_Rollback_Call[T]) Run(run func(ctx context.Context)) *Tx_Rollback_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Tx_Rollback_Call[T]) Return(err error) *Tx_Rollback_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *Tx_Rollback_Call[T]) RunAndReturn(run func(ctx context.Context) error) *Tx_Rollback_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewDBProvider creates a new instance of DBProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBProvider[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *DBProvider[T] {
	mock := &DBProvider[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DBProvider is an autogenerated mock type for the DBProvider type
type DBProvider[T any] struct {
	mock.Mock
}

type DBProvider_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *DBProvider[T]) EXPECT() *DBProvider_Expecter[T] {
	return &DBProvider_Expecter[T]{mock: &_m.Mock}
}

// BeginTx provides a mock function for the type DBProvider
func (_mock *DBProvider[T]) BeginTx(opts txmng.TxOpts) (txmng.Tx[T], error) {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 txmng.Tx[T]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(txmng.TxOpts) (txmng.Tx[T], error)); ok {
		return returnFunc(opts)
	}
	if returnFunc, ok := ret.Get(0).(func(txmng.TxOpts) txmng.Tx[T]); ok {
		r0 = returnFunc(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txmng.Tx[T])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(txmng.TxOpts) error); ok {
		r1 = returnFunc(opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DBProvider_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type DBProvider_BeginTx_Call[T any] struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
//   - opts txmng.TxOpts
func (_e *DBProvider_Expecter[T]) BeginTx(opts interface{}) *DBProvider_BeginTx_Call[T] {
	return &DBProvider_BeginTx_Call[T]{Call: _e.mock.On("BeginTx", opts)}
}

func (_c *DBProvider_BeginTx_Call[T]) Run(run func(opts txmng.TxOpts)) *DBProvider_BeginTx_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.TxOpts
		if args[0] != nil {
			arg0 = args[0].(txmng.TxOpts)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DBProvider_BeginTx_Call[T]) Return(tx txmng.Tx[T], err error) *DBProvider_BeginTx_Call[T] {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *DBProvider_BeginTx_Call[T]) RunAndReturn(run func(opts txmng.TxOpts) (txmng.Tx[T], error)) *DBProvider_BeginTx_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetDB provides a mock function for the type DBProvider
func (_mock *DBProvider[T]) GetDB(opts txmng.NoTxOpts) T {
	ret := _mock.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func(txmng.NoTxOpts) T); ok {
		r0 = returnFunc(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// DBProvider_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type DBProvider_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - opts txmng.NoTxOpts
func (_e *DBProvider_Expecter[T]) GetDB(opts interface{}) *DBProvider_GetDB_Call[T] {
	return &DBProvider_GetDB_Call[T]{Call: _e.mock.On("GetDB", opts)}
}

func (_c *DBProvider_GetDB_Call[T]) Run(run func(opts txmng.NoTxOpts)) *DBProvider_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.NoTxOpts
		if args[0] != nil {
			arg0 = args[0].(txmng.NoTxOpts)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DBProvider_GetDB_Call[T]) Return(v T) *DBProvider_GetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *DBProvider_GetDB_Call[T]) RunAndReturn(run func(opts txmng.NoTxOpts) T) *DBProvider_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewPGX creates a new instance of PGX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPGX(t interface {
	mock.TestingT
	Cleanup(func())
}) *PGX {
	mock := &PGX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PGX is an autogenerated mock type for the PGX type
type PGX struct {
	mock.Mock
}

type PGX_Expecter struct {
	mock *mock.Mock
}

func (_m *PGX) EXPECT() *PGX_Expecter {
	return &PGX_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type PGX
func (_mock *PGX) Begin(ctx context.Context) (pgx.Tx, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 pgx.Tx
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (pgx.Tx, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) pgx.Tx); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Tx)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PGX_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type PGX_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PGX_Expecter) Begin(ctx interface{}) *PGX_Begin_Call {
	return &PGX_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *PGX_Begin_Call) Run(run func(ctx context.Context)) *PGX_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PGX_Begin_Call) Return(tx pgx.Tx, err error) *PGX_Begin_Call {
	_c.Call.Return(tx, err)
	return _c
}

func (_c *PGX_Begin_Call) RunAndReturn(run func(ctx context.Context) (pgx.Tx, error)) *PGX_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type PGX
func (_mock *PGX) Commit(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PGX_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type PGX_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PGX_Expecter) Commit(ctx interface{}) *PGX_Commit_Call {
	return &PGX_Commit_Call{Call: _e.mock.On("Commit", ctx)}
}

func (_c *PGX_Commit_Call) Run(run func(ctx context.Context)) *PGX_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PGX_Commit_Call) Return(err error) *PGX_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PGX_Commit_Call) RunAndReturn(run func(ctx context.Context) error) *PGX_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Conn provides a mock function for the type PGX
func (_mock *PGX) Conn() *pgx.Conn {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Conn")
	}

	var r0 *pgx.Conn
	if returnFunc, ok := ret.Get(0).(func() *pgx.Conn); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgx.Conn)
		}
	}
	return r0
}

// PGX_Conn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Conn'
type PGX_Conn_Call struct {
	*mock.Call
}

// Conn is a helper method to define mock.On call
func (_e *PGX_Expecter) Conn() *PGX_Conn_Call {
	return &PGX_Conn_Call{Call: _e.mock.On("Conn")}
}

func (_c *PGX_Conn_Call) Run(run func()) *PGX_Conn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PGX_Conn_Call) Return(conn *pgx.Conn) *PGX_Conn_Call {
	_c.Call.Return(conn)
	return _c
}

func (_c *PGX_Conn_Call) RunAndReturn(run func() *pgx.Conn) *PGX_Conn_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFrom provides a mock function for the type PGX
func (_mock *PGX) CopyFrom(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error) {
	ret := _mock.Called(ctx, tableName, columnNames, rowSrc)

	if len(ret) == 0 {
		panic("no return value specified for CopyFrom")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) (int64, error)); ok {
		return returnFunc(ctx, tableName, columnNames, rowSrc)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) int64); ok {
		r0 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, pgx.Identifier, []string, pgx.CopyFromSource) error); ok {
		r1 = returnFunc(ctx, tableName, columnNames, rowSrc)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PGX_CopyFrom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFrom'
type PGX_CopyFrom_Call struct {
	*mock.Call
}

// CopyFrom is a helper method to define mock.On call
//   - ctx context.Context
//   - tableName pgx.Identifier
//   - columnNames []string
//   - rowSrc pgx.CopyFromSource
func (_e *PGX_Expecter) CopyFrom(ctx interface{}, tableName interface{}, columnNames interface{}, rowSrc interface{}) *PGX_CopyFrom_Call {
	return &PGX_CopyFrom_Call{Call: _e.mock.On("CopyFrom", ctx, tableName, columnNames, rowSrc)}
}

func (_c *PGX_CopyFrom_Call) Run(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource)) *PGX_CopyFrom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Identifier
		if args[1] != nil {
			arg1 = args[1].(pgx.Identifier)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 pgx.CopyFromSource
		if args[3] != nil {
			arg3 = args[3].(pgx.CopyFromSource)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PGX_CopyFrom_Call) Return(n int64, err error) *PGX_CopyFrom_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *PGX_CopyFrom_Call) RunAndReturn(run func(ctx context.Context, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)) *PGX_CopyFrom_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type PGX
func (_mock *PGX) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	var tmpRet mock.Arguments
	if len(arguments) > 0 {
		tmpRet = _mock.Called(ctx, sql, arguments)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgconn.CommandTag, error)); ok {
		return returnFunc(ctx, sql, arguments...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgconn.CommandTag); ok {
		r0 = returnFunc(ctx, sql, arguments...)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, arguments...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PGX_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type PGX_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - arguments ...any
func (_e *PGX_Expecter) Exec(ctx interface{}, sql interface{}, arguments ...interface{}) *PGX_Exec_Call {
	return &PGX_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, sql}, arguments...)...)}
}

func (_c *PGX_Exec_Call) Run(run func(ctx context.Context, sql string, arguments ...any)) *PGX_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *PGX_Exec_Call) Return(commandTag pgconn.CommandTag, err error) *PGX_Exec_Call {
	_c.Call.Return(commandTag, err)
	return _c
}

func (_c *PGX_Exec_Call) RunAndReturn(run func(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)) *PGX_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// LargeObjects provides a mock function for the type PGX
func (_mock *PGX) LargeObjects() pgx.LargeObjects {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for LargeObjects")
	}

	var r0 pgx.LargeObjects
	if returnFunc, ok := ret.Get(0).(func() pgx.LargeObjects); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(pgx.LargeObjects)
	}
	return r0
}

// PGX_LargeObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LargeObjects'
type PGX_LargeObjects_Call struct {
	*mock.Call
}

// LargeObjects is a helper method to define mock.On call
func (_e *PGX_Expecter) LargeObjects() *PGX_LargeObjects_Call {
	return &PGX_LargeObjects_Call{Call: _e.mock.On("LargeObjects")}
}

func (_c *PGX_LargeObjects_Call) Run(run func()) *PGX_LargeObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PGX_LargeObjects_Call) Return(largeObjects pgx.LargeObjects) *PGX_LargeObjects_Call {
	_c.Call.Return(largeObjects)
	return _c
}

func (_c *PGX_LargeObjects_Call) RunAndReturn(run func() pgx.LargeObjects) *PGX_LargeObjects_Call {
	_c.Call.Return(run)
	return _c
}

// Prepare provides a mock function for the type PGX
func (_mock *PGX) Prepare(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error) {
	ret := _mock.Called(ctx, name, sql)

	if len(ret) == 0 {
		panic("no return value specified for Prepare")
	}

	var r0 *pgconn.StatementDescription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*pgconn.StatementDescription, error)); ok {
		return returnFunc(ctx, name, sql)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *pgconn.StatementDescription); ok {
		r0 = returnFunc(ctx, name, sql)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgconn.StatementDescription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, sql)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PGX_Prepare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Prepare'
type PGX_Prepare_Call struct {
	*mock.Call
}

// Prepare is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - sql string
func (_e *PGX_Expecter) Prepare(ctx interface{}, name interface{}, sql interface{}) *PGX_Prepare_Call {
	return &PGX_Prepare_Call{Call: _e.mock.On("Prepare", ctx, name, sql)}
}

func (_c *PGX_Prepare_Call) Run(run func(ctx context.Context, name string, sql string)) *PGX_Prepare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PGX_Prepare_Call) Return(statementDescription *pgconn.StatementDescription, err error) *PGX_Prepare_Call {
	_c.Call.Return(statementDescription, err)
	return _c
}

func (_c *PGX_Prepare_Call) RunAndReturn(run func(ctx context.Context, name string, sql string) (*pgconn.StatementDescription, error)) *PGX_Prepare_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type PGX
func (_mock *PGX) Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 pgx.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (pgx.Rows, error)); ok {
		return returnFunc(ctx, sql, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Rows); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, sql, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PGX_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type PGX_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *PGX_Expecter) Query(ctx interface{}, sql interface{}, args ...interface{}) *PGX_Query_Call {
	return &PGX_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *PGX_Query_Call) Run(run func(ctx context.Context, sql string, args ...any)) *PGX_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *PGX_Query_Call) Return(rows pgx.Rows, err error) *PGX_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *PGX_Query_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) (pgx.Rows, error)) *PGX_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type PGX
func (_mock *PGX) QueryRow(ctx context.Context, sql string, args ...any) pgx.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, sql, args)
	} else {
		tmpRet = _mock.Called(ctx, sql)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 pgx.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) pgx.Row); ok {
		r0 = returnFunc(ctx, sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}
	return r0
}

// PGX_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type PGX_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - sql string
//   - args ...any
func (_e *PGX_Expecter) QueryRow(ctx interface{}, sql interface{}, args ...interface{}) *PGX_QueryRow_Call {
	return &PGX_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, sql}, args...)...)}
}

func (_c *PGX_QueryRow_Call) Run(run func(ctx context.Context, sql string, args ...any)) *PGX_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *PGX_QueryRow_Call) Return(row pgx.Row) *PGX_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *PGX_QueryRow_Call) RunAndReturn(run func(ctx context.Context, sql string, args ...any) pgx.Row) *PGX_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type PGX
func (_mock *PGX) Rollback(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PGX_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type PGX_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PGX_Expecter) Rollback(ctx interface{}) *PGX_Rollback_Call {
	return &PGX_Rollback_Call{Call: _e.mock.On("Rollback", ctx)}
}

func (_c *PGX_Rollback_Call) Run(run func(ctx context.Context)) *PGX_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PGX_Rollback_Call) Return(err error) *PGX_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PGX_Rollback_Call) RunAndReturn(run func(ctx context.Context) error) *PGX_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SendBatch provides a mock function for the type PGX
func (_mock *PGX) SendBatch(ctx context.Context, b *pgx.Batch) pgx.BatchResults {
	ret := _mock.Called(ctx, b)

	if len(ret) == 0 {
		panic("no return value specified for SendBatch")
	}

	var r0 pgx.BatchResults
	if returnFunc, ok := ret.Get(0).(func(context.Context, *pgx.Batch) pgx.BatchResults); ok {
		r0 = returnFunc(ctx, b)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.BatchResults)
		}
	}
	return r0
}

// PGX_SendBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBatch'
type PGX_SendBatch_Call struct {
	*mock.Call
}

// SendBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - b *pgx.Batch
func (_e *PGX_Expecter) SendBatch(ctx interface{}, b interface{}) *PGX_SendBatch_Call {
	return &PGX_SendBatch_Call{Call: _e.mock.On("SendBatch", ctx, b)}
}

func (_c *PGX_SendBatch_Call) Run(run func(ctx context.Context, b *pgx.Batch)) *PGX_SendBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *pgx.Batch
		if args[1] != nil {
			arg1 = args[1].(*pgx.Batch)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PGX_SendBatch_Call) Return(batchResults pgx.BatchResults) *PGX_SendBatch_Call {
	_c.Call.Return(batchResults)
	return _c
}

func (_c *PGX_SendBatch_Call) RunAndReturn(run func(ctx context.Context, b *pgx.Batch) pgx.BatchResults) *PGX_SendBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewStdSQL creates a new instance of StdSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStdSQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *StdSQL {
	mock := &StdSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StdSQL is an autogenerated mock type for the StdSQL type
type StdSQL struct {
	mock.Mock
}

type StdSQL_Expecter struct {
	mock *mock.Mock
}

func (_m *StdSQL) EXPECT() *StdSQL_Expecter {
	return &StdSQL_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function for the type StdSQL
func (_mock *StdSQL) Commit() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StdSQL_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type StdSQL_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
func (_e *StdSQL_Expecter) Commit() *StdSQL_Commit_Call {
	return &StdSQL_Commit_Call{Call: _e.mock.On("Commit")}
}

func (_c *StdSQL_Commit_Call) Run(run func()) *StdSQL_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StdSQL_Commit_Call) Return(err error) *StdSQL_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StdSQL_Commit_Call) RunAndReturn(run func() error) *StdSQL_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// ExecContext provides a mock function for the type StdSQL
func (_mock *StdSQL) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 sql.Result
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (sql.Result, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StdSQL_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type StdSQL_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *StdSQL_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *StdSQL_ExecContext_Call {
	return &StdSQL_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *StdSQL_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *StdSQL_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *StdSQL_ExecContext_Call) Return(result sql.Result, err error) *StdSQL_ExecContext_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *StdSQL_ExecContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (sql.Result, error)) *StdSQL_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareContext provides a mock function for the type StdSQL
func (_mock *StdSQL) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	ret := _mock.Called(ctx, query)

	if len(ret) == 0 {
		panic("no return value specified for PrepareContext")
	}

	var r0 *sql.Stmt
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sql.Stmt, error)); ok {
		return returnFunc(ctx, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sql.Stmt); ok {
		r0 = returnFunc(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, query)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StdSQL_PrepareContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareContext'
type StdSQL_PrepareContext_Call struct {
	*mock.Call
}

// PrepareContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
func (_e *StdSQL_Expecter) PrepareContext(ctx interface{}, query interface{}) *StdSQL_PrepareContext_Call {
	return &StdSQL_PrepareContext_Call{Call: _e.mock.On("PrepareContext", ctx, query)}
}

func (_c *StdSQL_PrepareContext_Call) Run(run func(ctx context.Context, query string)) *StdSQL_PrepareContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *StdSQL_PrepareContext_Call) Return(stmt *sql.Stmt, err error) *StdSQL_PrepareContext_Call {
	_c.Call.Return(stmt, err)
	return _c
}

func (_c *StdSQL_PrepareContext_Call) RunAndReturn(run func(ctx context.Context, query string) (*sql.Stmt, error)) *StdSQL_PrepareContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryContext provides a mock function for the type StdSQL
func (_mock *StdSQL) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 *sql.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (*sql.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StdSQL_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type StdSQL_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *StdSQL_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *StdSQL_QueryContext_Call {
	return &StdSQL_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *StdSQL_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *StdSQL_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *StdSQL_QueryContext_Call) Return(rows *sql.Rows, err error) *StdSQL_QueryContext_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *StdSQL_QueryContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)) *StdSQL_QueryContext_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRowContext provides a mock function for the type StdSQL
func (_mock *StdSQL) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRowContext")
	}

	var r0 *sql.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}
	return r0
}

// StdSQL_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type StdSQL_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...interface{}
func (_e *StdSQL_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *StdSQL_QueryRowContext_Call {
	return &StdSQL_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *StdSQL_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *StdSQL_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []interface{}
		var variadicArgs []interface{}
		if len(args) > 2 {
			variadicArgs = args[2].([]interface{})
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *StdSQL_QueryRowContext_Call) Return(row *sql.Row) *StdSQL_QueryRowContext_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *StdSQL_QueryRowContext_Call) RunAndReturn(run func(ctx context.Context, query string, args ...interface{}) *sql.Row) *StdSQL_QueryRowContext_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type StdSQL
func (_mock *StdSQL) Rollback() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StdSQL_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type StdSQL_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
func (_e *StdSQL_Expecter) Rollback() *StdSQL_Rollback_Call {
	return &StdSQL_Rollback_Call{Call: _e.mock.On("Rollback")}
}

func (_c *StdSQL_Rollback_Call) Run(run func()) *StdSQL_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StdSQL_Rollback_Call) Return(err error) *StdSQL_Rollback_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StdSQL_Rollback_Call) RunAndReturn(run func() error) *StdSQL_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewScanner creates a new instance of Scanner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewScanner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Scanner {
	mock := &Scanner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Scanner is an autogenerated mock type for the Scanner type
type Scanner struct {
	mock.Mock
}

type Scanner_Expecter struct {
	mock *mock.Mock
}

func (_m *Scanner) EXPECT() *Scanner_Expecter {
	return &Scanner_Expecter{mock: &_m.Mock}
}

// Scan provides a mock function for the type Scanner
func (_mock *Scanner) Scan(args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(args)
	} else {
		tmpRet = _mock.Called()
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(...any) error); ok {
		r0 = returnFunc(args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Scanner_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type Scanner_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - args ...any
func (_e *Scanner_Expecter) Scan(args ...interface{}) *Scanner_Scan_Call {
	return &Scanner_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{}, args...)...)}
}

func (_c *Scanner_Scan_Call) Run(run func(args ...any)) *Scanner_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		var variadicArgs []any
		if len(args) > 0 {
			variadicArgs = args[0].([]any)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Scanner_Scan_Call) Return(err error) *Scanner_Scan_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Scanner_Scan_Call) RunAndReturn(run func(args ...any) error) *Scanner_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxManager creates a new instance of TxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxManager {
	mock := &TxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

type TxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxManager) EXPECT() *TxManager_Expecter {
	return &TxManager_Expecter{mock: &_m.Mock}
}

// RunNoTx provides a mock function for the type TxManager
func (_mock *TxManager) RunNoTx(opts txmng.NoTxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error) {
	ret := _mock.Called(opts, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunNoTx")
	}

	var r0 txmng.Scanner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(txmng.NoTxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error)); ok {
		return returnFunc(opts, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(txmng.NoTxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) txmng.Scanner); ok {
		r0 = returnFunc(opts, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txmng.Scanner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(txmng.NoTxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) error); ok {
		r1 = returnFunc(opts, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TxManager_RunNoTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunNoTx'
type TxManager_RunNoTx_Call struct {
	*mock.Call
}

// RunNoTx is a helper method to define mock.On call
//   - opts txmng.NoTxOpts
//   - fn func(ctx txmng.Context) (txmng.Scanner, error)
func (_e *TxManager_Expecter) RunNoTx(opts interface{}, fn interface{}) *TxManager_RunNoTx_Call {
	return &TxManager_RunNoTx_Call{Call: _e.mock.On("RunNoTx", opts, fn)}
}

func (_c *TxManager_RunNoTx_Call) Run(run func(opts txmng.NoTxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error))) *TxManager_RunNoTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.NoTxOpts
		if args[0] != nil {
			arg0 = args[0].(txmng.NoTxOpts)
		}
		var arg1 func(ctx txmng.Context) (txmng.Scanner, error)
		if args[1] != nil {
			arg1 = args[1].(func(ctx txmng.Context) (txmng.Scanner, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TxManager_RunNoTx_Call) Return(scanner txmng.Scanner, err error) *TxManager_RunNoTx_Call {
	_c.Call.Return(scanner, err)
	return _c
}

func (_c *TxManager_RunNoTx_Call) RunAndReturn(run func(opts txmng.NoTxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error)) *TxManager_RunNoTx_Call {
	_c.Call.Return(run)
	return _c
}

// RunTx provides a mock function for the type TxManager
func (_mock *TxManager) RunTx(opts txmng.TxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error) {
	ret := _mock.Called(opts, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 txmng.Scanner
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(txmng.TxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error)); ok {
		return returnFunc(opts, fn)
	}
	if returnFunc, ok := ret.Get(0).(func(txmng.TxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) txmng.Scanner); ok {
		r0 = returnFunc(opts, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(txmng.Scanner)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(txmng.TxOpts, func(ctx txmng.Context) (txmng.Scanner, error)) error); ok {
		r1 = returnFunc(opts, fn)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TxManager_RunTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunTx'
type TxManager_RunTx_Call struct {
	*mock.Call
}

// RunTx is a helper method to define mock.On call
//   - opts txmng.TxOpts
//   - fn func(ctx txmng.Context) (txmng.Scanner, error)
func (_e *TxManager_Expecter) RunTx(opts interface{}, fn interface{}) *TxManager_RunTx_Call {
	return &TxManager_RunTx_Call{Call: _e.mock.On("RunTx", opts, fn)}
}

func (_c *TxManager_RunTx_Call) Run(run func(opts txmng.TxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error))) *TxManager_RunTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.TxOpts
		if args[0] != nil {
			arg0 = args[0].(txmng.TxOpts)
		}
		var arg1 func(ctx txmng.Context) (txmng.Scanner, error)
		if args[1] != nil {
			arg1 = args[1].(func(ctx txmng.Context) (txmng.Scanner, error))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *TxManager_RunTx_Call) Return(scanner txmng.Scanner, err error) *TxManager_RunTx_Call {
	_c.Call.Return(scanner, err)
	return _c
}

func (_c *TxManager_RunTx_Call) RunAndReturn(run func(opts txmng.TxOpts, fn func(ctx txmng.Context) (txmng.Scanner, error)) (txmng.Scanner, error)) *TxManager_RunTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewDBManager creates a new instance of DBManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBManager[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *DBManager[T] {
	mock := &DBManager[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DBManager is an autogenerated mock type for the DBManager type
type DBManager[T any] struct {
	mock.Mock
}

type DBManager_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *DBManager[T]) EXPECT() *DBManager_Expecter[T] {
	return &DBManager_Expecter[T]{mock: &_m.Mock}
}

// GetDB provides a mock function for the type DBManager
func (_mock *DBManager[T]) GetDB(ctx txmng.Context) (T, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDB")
	}

	var r0 T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(txmng.Context) (T, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(txmng.Context) T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(txmng.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// DBManager_GetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDB'
type DBManager_GetDB_Call[T any] struct {
	*mock.Call
}

// GetDB is a helper method to define mock.On call
//   - ctx txmng.Context
func (_e *DBManager_Expecter[T]) GetDB(ctx interface{}) *DBManager_GetDB_Call[T] {
	return &DBManager_GetDB_Call[T]{Call: _e.mock.On("GetDB", ctx)}
}

func (_c *DBManager_GetDB_Call[T]) Run(run func(ctx txmng.Context)) *DBManager_GetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.Context
		if args[0] != nil {
			arg0 = args[0].(txmng.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DBManager_GetDB_Call[T]) Return(v T, err error) *DBManager_GetDB_Call[T] {
	_c.Call.Return(v, err)
	return _c
}

func (_c *DBManager_GetDB_Call[T]) RunAndReturn(run func(ctx txmng.Context) (T, error)) *DBManager_GetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MustGetDB provides a mock function for the type DBManager
func (_mock *DBManager[T]) MustGetDB(ctx txmng.Context) T {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for MustGetDB")
	}

	var r0 T
	if returnFunc, ok := ret.Get(0).(func(txmng.Context) T); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	return r0
}

// DBManager_MustGetDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustGetDB'
type DBManager_MustGetDB_Call[T any] struct {
	*mock.Call
}

// MustGetDB is a helper method to define mock.On call
//   - ctx txmng.Context
func (_e *DBManager_Expecter[T]) MustGetDB(ctx interface{}) *DBManager_MustGetDB_Call[T] {
	return &DBManager_MustGetDB_Call[T]{Call: _e.mock.On("MustGetDB", ctx)}
}

func (_c *DBManager_MustGetDB_Call[T]) Run(run func(ctx txmng.Context)) *DBManager_MustGetDB_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 txmng.Context
		if args[0] != nil {
			arg0 = args[0].(txmng.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *DBManager_MustGetDB_Call[T]) Return(v T) *DBManager_MustGetDB_Call[T] {
	_c.Call.Return(v)
	return _c
}

func (_c *DBManager_MustGetDB_Call[T]) RunAndReturn(run func(ctx txmng.Context) T) *DBManager_MustGetDB_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewRetrier creates a new instance of Retrier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRetrier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Retrier {
	mock := &Retrier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Retrier is an autogenerated mock type for the Retrier type
type Retrier struct {
	mock.Mock
}

type Retrier_Expecter struct {
	mock *mock.Mock
}

func (_m *Retrier) EXPECT() *Retrier_Expecter {
	return &Retrier_Expecter{mock: &_m.Mock}
}

// Do provides a mock function for the type Retrier
func (_mock *Retrier) Do(fn func() error) error {
	ret := _mock.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = returnFunc(fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Retrier_Do_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Do'
type Retrier_Do_Call struct {
	*mock.Call
}

// Do is a helper method to define mock.On call
//   - fn func() error
func (_e *Retrier_Expecter) Do(fn interface{}) *Retrier_Do_Call {
	return &Retrier_Do_Call{Call: _e.mock.On("Do", fn)}
}

func (_c *Retrier_Do_Call) Run(run func(fn func() error)) *Retrier_Do_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 func() error
		if args[0] != nil {
			arg0 = args[0].(func() error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Retrier_Do_Call) Return(err error) *Retrier_Do_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Retrier_Do_Call) RunAndReturn(run func(fn func() error) error) *Retrier_Do_Call {
	_c.Call.Return(run)
	return _c
}
